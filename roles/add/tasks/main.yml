---

- ansible.builtin.include_role: # knownhost
    name: alex.base.knownproxmoxhost

- ansible.builtin.include_role: # detect python
    name: alex.proxmox.detectpythonproxmox

- ansible.builtin.include_role:
    name: alex.proxmox.statustemplate

- name: Validate template [{{ prop_proxmox_templateid }}]
  ansible.builtin.fail:
    msg: Template does not exist
  when: '"NOTEXIST" in result_status.stdout'

- ansible.builtin.include_role:
    name: alex.proxmox.statusvm

- name: Setting host facts using complex arguments
  ansible.builtin.set_fact:
    create: '{{ "NOTEXIST" in result_status.stdout }}'

- name: Add Block
  when: 'create == true'
  block:
    - name: Copy template [{{ prop_proxmox_templateid }},{{ prop_proxmox_vmid }}]
      shell: |
        qm clone {{ prop_proxmox_templateid }} {{ prop_proxmox_vmid }} --full --name "{{ prop_proxmox_name }}"
        description=$'# {{ prop_hostname }}  \n{{ prop_description }}  \n{{ prop_arch }}  \n{{ prop_os }}  \n{{ prop_ipaddress }}  \n{{ prop_environment }}  \n'
        description+="$(date)"
        description+=$'  \n'
        if [ "{{ prop_weburl | default('null') }}" != "null" ]; then
          description+=$'<a href="{{ prop_weburl | default("null") }}" target="_blank">web</a>  \n'
        fi
        qm set {{ prop_proxmox_vmid }} --agent enabled=0 --description "$description"
        qm set {{ prop_proxmox_vmid }} --cpu cputype=host 
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ prop_proxmox_host }}"
        ansible_python_interpreter: "{{ prop_proxmox_python_path }}"
      become: true

    - ansible.builtin.include_role:
        name: alex.proxmox.setnetwork

    - name: Set memory [{{ prop_proxmox_vmid }}]
      shell: |
        qm set {{ prop_proxmox_vmid }} --memory {{ prop_vm_memory }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ prop_proxmox_host }}"
        ansible_python_interpreter: "{{ prop_proxmox_python_path }}"
      become: true

    - name: Set cores [{{ prop_proxmox_vmid }}]
      shell: |
        qm set {{ prop_proxmox_vmid }} --cores {{ prop_vm_cores }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ prop_proxmox_host }}"
        ansible_python_interpreter: "{{ prop_proxmox_python_path }}"
      become: true

    - name: Set boot start [{{ prop_proxmox_vmid }}]
      shell: |
        qm set {{ prop_proxmox_vmid }} --onboot {{ prop_vm_start_boot }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ prop_proxmox_host }}"
        ansible_python_interpreter: "{{ prop_proxmox_python_path }}"
      become: true

    - name: Set usb [{{ prop_proxmox_vmid }}]
      shell: |
        qm set {{ prop_proxmox_vmid }} --{{ item.name }} host={{ item.device }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      loop: "{{ prop_vm_usb | default([]) }}"
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ prop_proxmox_host }}"
        ansible_python_interpreter: "{{ prop_proxmox_python_path }}"
      become: true
