---

- ansible.builtin.include_role:
    name: alex.proxmox.status
  vars:
    args_status_vmid: "{{ args_add_templateid }}"
    args_status_host: "{{ args_add_host }}"

- name: Validate template [{{ args_add_templateid }}]
  ansible.builtin.fail:
    msg: Template does not exist
  when: '"NOTEXIST" in result_status.stdout'

- ansible.builtin.include_role:
    name: alex.proxmox.status
  vars:
    args_status_vmid: "{{ args_add_vmid }}"
    args_status_host: "{{ args_add_host }}"

- name: Add Block
  when: '"NOTEXIST" in result_status.stdout'
  block:
    - name: Copy template [{{ args_add_templateid }},{{ args_add_vmid }}]
      shell: |
        qm clone {{ args_add_templateid }} {{ args_add_vmid }} --full --name "{{ args_add_name }}"
        qm set {{ args_add_vmid }} --agent enabled=1 --description $'# {{ args_add_hostname }}  \n{{ args_add_description }}  \n{{ args_add_ipaddress }}'
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ args_add_host }}"
      become: true

    - name: Set network1 [{{ args_add_vmid }}]
      shell: |
        net=model=virtio,macaddr={{ args_add_mac }},bridge=vmbr0,firewall=1
        if [ "{{ args_add_vlan }}" -gt "0" ]; then
          net=$net,tag={{ args_add_vlan }}
        fi
        echo $net
        qm set {{ args_add_vmid }} --net0 $net
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ args_add_host }}"
      become: true

    - name: Set network2 [{{ args_add_vmid }}]
      shell: |
        net=model=virtio,macaddr={{ args_add_mac2 }},bridge=vmbr0,firewall=1
        if [ "{{ args_add_vlan2 | default('0') }}" -gt "0" ]; then
          net=$net,tag={{ args_add_vlan2 }}
        fi
        echo $net
        qm set {{ args_add_vmid }} --net1 $net
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      when: 'args_add_mac2 != "0"'
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ args_add_host }}"
      become: true

    - name: Set memory [{{ args_add_vmid }}]
      shell: |
        qm set {{ args_add_vmid }} --memory {{ args_add_memory }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ args_add_host }}"
      become: true

    - name: Set cores [{{ args_add_vmid }}]
      shell: |
        qm set {{ args_add_vmid }} --cores {{ args_add_cores }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ args_add_host }}"
      become: true

    - name: Set boot start [{{ args_add_vmid }}]
      shell: |
        qm set {{ args_add_vmid }} --onboot {{ args_add_start_boot }}
        if [ "$?" -eq "0" ]; then
          echo "CHANGED"
        else
          echo "FAILED"
        fi
      args:
        executable: /bin/bash
      register: result
      changed_when: '"CHANGED" in result.stdout'
      failed_when: '"FAILED" in result.stdout'
      vars:
        ansible_connection: ssh
        ansible_host: "{{ args_add_host }}"
      become: true
